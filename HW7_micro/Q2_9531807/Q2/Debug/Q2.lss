
AVRASM ver. 2.1.52  D:\MyDocuments\Sixth Semester\Microprocessor and Assembly\my_HWs\HW7_micro\Q2_9531807\Q2\Q2.asm Fri May 17 18:04:10 2019

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.232\avrassembler\Include\m16def.inc'
D:\MyDocuments\Sixth Semester\Microprocessor and Assembly\my_HWs\HW7_micro\Q2_9531807\Q2\Q2.asm(8): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.232\avrassembler\Include\m16def.inc'
D:\MyDocuments\Sixth Semester\Microprocessor and Assembly\my_HWs\HW7_micro\Q2_9531807\Q2\Q2.asm(33): warning: Register r16 already defined by the .DEF directive
D:\MyDocuments\Sixth Semester\Microprocessor and Assembly\my_HWs\HW7_micro\Q2_9531807\Q2\Q2.asm(34): warning: Register r17 already defined by the .DEF directive
D:\MyDocuments\Sixth Semester\Microprocessor and Assembly\my_HWs\HW7_micro\Q2_9531807\Q2\Q2.asm(35): warning: Register r18 already defined by the .DEF directive
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 #define _M16DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega16
                 #pragma AVRPART ADMIN PART_NAME ATmega16
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SE	= 6	; Sleep Enable
                 .equ	SM2	= 7	; Sleep Mode Select
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special function I/O register
                 ;.equ	PSR10	= 0	; Prescaler reset
                 .equ	PSR2	= 1	; Prescaler reset
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCSR - MCU Control And Status Register
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMCR	= SPMCSR	; For compatibility
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 
                  * Q2.asm
                  *
                  *  Created: 5/15/2019 3:56:10 PM
                  *   Author: Armaghan
                  */ 
                 
                 .include "m16def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 
                 .equ LCD_RS	= 1
                 .equ LCD_RW	= 2
                 .equ LCD_E	= 3
                 
                 .def a0 = R20
                 .def a1 = R21
                 .def a2 = R22
                 .def a3 = R23
                 .def a4 = R24
                 .def mode = R25
                 
                 .def LBoundVoltageL = R3
                 .def LBoundVoltageH = R4
                 .def UBoundVoltageL = R5
                 .def UBoundVoltageH = R6
                 
                 .def temp	= R16
                 .def argument= R17		;argument for calling subroutines
                 .def return	= R18		;return value from subroutines
                 
                  
                  //  humidity percentage calculation
                  
                 .def divider = R16
                 .def dividendL = R17
                 .def dividendH = R18
                 .def division_counter = R19
                 
                  .org 0
000000 940c 001e 	JMP reset
                 
                 .org 0x01C
00001c 940c 003d 	JMP ADC_routine
                 
                 reset:
00001e e004       ldi r16, HIGH(RAMEND);
00001f bf0e       out SPH, R16
000020 e50f       ldi R16, LOW(RAMEND)
000021 bf0d       out SPL, R16
000022 e090       ldi mode, 0
000023 e100       ldi r16 , (1<<PD4)
000024 bb01       out DDRD , r16
000025 d123       rcall	LCD_init
                 
                  start:
000026 9a8c      	sbi DDRD, 4
000027 e80f      	ldi r16, (1 << ADEN)|(1 << ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)
000028 b906      	out ADCSRA, r16
                 	// read ADC2
000029 e402      	LDI R16, 0b01000010
00002a b907      	OUT ADMUX, R16
00002b 9a36      	SBI ADCSRA, ADSC
00002c 9478      	sei
                 
                 	LOOP1 : 
00002d 3091      		cpi mode, 1
00002e f039      		breq select_adc2
00002f 3092      		cpi mode, 2
000030 f041      		breq select_adc1
                 		 //sleep mode
000031 b705      		in R16, MCUCR
000032 e500      		LDI R16, (1 << SM0)|(1 << SE)
000033 bf05      		out MCUCR, R16
000034 9588      		sleep
000035 cff7      	rjmp LOOP1
                 		
                 	select_adc2:
000036 9a38      		sbi ADMUX, MUX0
000037 9a36      		sbi ADCSRA, ADSC
000038 cff4      	rjmp loop1
                 
                 	select_adc1:
000039 9839      		cbi ADMUX, MUX1
                 		//free runner mode
00003a 9a35      		sbi ADCSRA, ADATE
00003b 9a36      		sbi ADCSRA, ADSC
00003c cff0      	rjmp loop1
                 
                 ADC_routine:
00003d b705      	in R16, MCUCR
00003e 7f09      	CBR R16, SE
00003f bf05      	OUT MCUCR, R16
                 	//Read lower bound voltage
000040 3090      	cpi mode, 0 
000041 f131      	breq read_lower_bound_voltage
                 	read1:
                 	//Read upper bound voltage
000042 3091      	cpi mode, 1
000043 f169      	breq read_upper_bound_voltage
                 	read2:
000044 3093      	cpi mode, 3
000045 b70f      	in R16, SREG
000046 ff01      	sbrs r16, 1
000047 9593      	inc mode
                 
000048 3093      	cpi mode, 3
000049 f059      	breq humidity_measure
                 	
                 	done_measuring:
00004a 9518      	RETI
                 
                 DELAY:
00004b e051      	LDI R21, 0X01
                 DELAY2:
00004c ef6f      	LDI R22, 0xff
                 DELAY3:
00004d ef7f      	LDI R23, 0Xff
00004e 957a      LOOP: DEC R23
00004f f7f1      	BRNE LOOP
000050 956a      	DEC R22
000051 f7d9      	BRNE DELAY3
000052 955a      	DEC R21
000053 f7c1      	BRNE DELAY2
000054 9518      	RETI
                 
                 humidity_measure:
000055 b144      	IN R20, ADCL
000056 b155      	IN R21, ADCH
                 
000057 940e 0083 	call is_valid_humidity
                 	// if between 30% and 70%, turn LED1 on 
                 
000059 5c45      	subi r20, 197
00005a 4050      	sbci r21, 0
00005b 2f25      	mov dividendH, r21
00005c 2f14      	mov dividendL, r20
00005d 940e 0090 	call division
00005f 2f43      	mov a0, division_counter
000060 e050      	ldi a1, 0
000061 e011      	ldi	argument, 0x01		
000062 d091      	rcall	LCD_command
000063 940e 00a6 	call binTobcd
000065 940e 004b 	call delay	
000067 cfe2      rjmp done_measuring
                 
                 read_lower_bound_voltage:
000068 b144      	IN R20, ADCL
000069 b155      	IN R21, ADCH
00006a 2e34      	MOV R3, R20;
00006b 2e45      	MOV R4, R21
00006c 940e 00a6 	call binTobcd
00006e 940e 004b 	call delay
000070 cfd1      rjmp read1
                 
                 read_upper_bound_voltage:
000071 b144      	IN R20, ADCL
000072 b155      	IN R21, ADCH
000073 2e54      	MOV R5, R20;
000074 2e65      	MOV R6, R21
000075 940e 00a6 	call binTobcd
000077 940e 004b 	call delay
                 
000079 cfca      rjmp read2
                 
                 comp_upperBound_voltageL:
00007a 1545      	cp r20,UBoundVoltageL 
00007b f058      	brlo next
00007c f089      	breq make_on
00007d f470      	brsh make_off
00007e c008      	rjmp next
                 
                 comp_lowerBound_voltageL:
00007f 1543      	cp r20,LBoundVoltageL 
000080 f058      	brlo make_off
000081 f460      	brsh make_on
000082 c008      	rjmp final
                 
                 is_valid_humidity:
000083 1556      	cp r21,UBoundVoltageH 
000084 f010      	brlo next
000085 f3a1      	breq comp_upperBound_voltageL
000086 f428      	brsh make_off
                 	next:
000087 1554      	cp r21,LBoundVoltageH 
000088 f018      	brlo make_off
000089 f3a9      	breq comp_lowerBound_voltageL
00008a f418      	brsh make_on
                 
                 	final:
00008b 9508      	ret
                 
                 make_off:
00008c 9894      	cbi PORTD, 4
00008d cffd      	rjmp final
                 
                 make_on:
00008e 9a94      	sbi PORTD, 4
00008f cffb      	rjmp final
                 	
                 division:
000090 e030      	ldi division_counter, 0
000091 e006      	ldi divider, 6
                 
                 	divide_low:
000092 9f03      	mul divider, division_counter
000093 9533      	inc division_counter
000094 0601      	cpc r0, dividendL
000095 f408      	brsh divide2
000096 f3d8      	brlo divide_low
                 
                 	divide2:
000097 953a      	dec division_counter
                 	divide_high:
000098 9f03      	mul divider, division_counter
000099 9533      	inc division_counter
00009a 0612      	cpc r1, dividendh
00009b f410      	brsh divide_low2
00009c f3d8      	brlo divide_high
                 	
                 	divide3:
00009d 953a      	dec division_counter
                 	divide_low2:
00009e 9f03      	mul divider, division_counter
00009f 9533      	inc division_counter
0000a0 0601      	cpc r0, dividendL
0000a1 f408      	brsh exit_divide
0000a2 f3d8      	brlo divide_low2
                 
                 	exit_divide:
0000a3 953a      	dec division_counter
0000a4 953a      	dec division_counter
0000a5 9508      	ret
                 
                 binTobcd:
0000a6 e28f              ldi a4, -1 + '0'
0000a7 9583      _bi1:   inc a4
0000a8 5140              subi a0, low(10000)
0000a9 4257              sbci a1, high(10000)
0000aa f7e0              brcc _bi1
                 
0000ab e37a              ldi a3, 10 + '0'
0000ac 957a      _bi2:   dec a3
0000ad 5148              subi a0, low(-1000)
0000ae 4f5c              sbci a1, high(-1000)
0000af f3e0              brcs _bi2
                 
0000b0 2f17      		mov	argument, a3	
0000b1 d022      		rcall	LCD_putchar
                 
0000b2 e26f              ldi a2, -1 + '0'
0000b3 9563      _bi3:   inc a2
0000b4 5644              subi a0, low(100)
0000b5 4050              sbci a1, high(100)
0000b6 f7e0              brcc _bi3
                 
0000b7 2f16      		mov	argument, a2	
0000b8 d01b      		rcall	LCD_putchar
                 
0000b9 e35a              ldi a1, 10 + '0'
0000ba 955a      _bi4:   dec a1
0000bb 5f46              subi a0, -10
0000bc f3e8              brcs _bi4
0000bd 5d40              subi a0, -'0'
0000be 2f15      		mov	argument, a1	
0000bf d014      		rcall	LCD_putchar
                 
0000c0 2f14      		mov	argument, a0	
0000c1 d012      		rcall	LCD_putchar
0000c2 9508              ret
                 
                 
                 ///////////////////////////////////////////////
                 
                 lcd_command8:	;used for init (we need some 8-bit commands to switch to 4-bit mode!)
0000c3 b304      	in	temp, DDRC		;we need to set the high nibble of DDRD while leaving
                 					;the other bits untouched. Using temp for that.
0000c4 6f00      	sbr	temp, 0b11110000	;set high nibble in temp
0000c5 bb04      	out	DDRC, temp		;write value to DDRD again
0000c6 b305      	in	temp, PortC		;then get the port value
0000c7 700f      	cbr	temp, 0b11110000	;and clear the data bits
0000c8 7f10      	cbr	argument, 0b00001111	;then clear the low nibble of the argument
                 					;so that no control line bits are overwritten
0000c9 2b01      	or	temp, argument		;then set the data bits (from the argument) in the
                 					;Port value
0000ca bb05      	out	PortC, temp		;and write the port value.
0000cb 9aab      	sbi	PortC, LCD_E		;now strobe E
0000cc 0000      	nop
0000cd 0000      	nop
0000ce 0000      	nop
0000cf 98ab      	cbi	PortC, LCD_E
0000d0 b304      	in	temp, DDRC		;get DDRD to make the data lines input again
0000d1 700f      	cbr	temp, 0b11110000	;clear data line direction bits
0000d2 bb04      	out	DDRC, temp		;and write to DDRD
0000d3 9508      ret
                 
                 lcd_putchar:
0000d4 931f      	push	argument		;save the argmuent (it's destroyed in between)
0000d5 b304      	in	temp, DDRC		;get data direction bits
0000d6 6f00      	sbr	temp, 0b11110000	;set the data lines to output
0000d7 bb04      	out	DDRC, temp		;write value to DDRD
0000d8 b305      	in	temp, PortC		;then get the data from PortD
0000d9 7001      	cbr	temp, 0b11111110	;clear ALL LCD lines (data and control!)
0000da 7f10      	cbr	argument, 0b00001111	;we have to write the high nibble of our argument first
                 					;so mask off the low nibble
0000db 2b01      	or	temp, argument		;now set the argument bits in the Port value
0000dc bb05      	out	PortC, temp		;and write the port value
0000dd 9aa9      	sbi	PortC, LCD_RS		;now take RS high for LCD char data register access
0000de 9aab      	sbi	PortC, LCD_E		;strobe Enable
0000df 0000      	nop
0000e0 0000      	nop
0000e1 0000      	nop
0000e2 98ab      	cbi	PortC, LCD_E
0000e3 911f      	pop	argument		;restore the argument, we need the low nibble now...
0000e4 700f      	cbr	temp, 0b11110000	;clear the data bits of our port value
0000e5 9512      	swap	argument		;we want to write the LOW nibble of the argument to
                 					;the LCD data lines, which are the HIGH port nibble!
0000e6 7f10      	cbr	argument, 0b00001111	;clear unused bits in argument
0000e7 2b01      	or	temp, argument		;and set the required argument bits in the port value
0000e8 bb05      	out	PortC, temp		;write data to port
0000e9 9aa9      	sbi	PortC, LCD_RS		;again, set RS
0000ea 9aab      	sbi	PortC, LCD_E		;strobe Enable
0000eb 0000      	nop
0000ec 0000      	nop
0000ed 0000      	nop
0000ee 98ab      	cbi	PortC, LCD_E
0000ef 98a9      	cbi	PortC, LCD_RS
0000f0 b304      	in	temp, DDRC
0000f1 700f      	cbr	temp, 0b11110000	;data lines are input again
0000f2 bb04      	out	DDRC, temp
0000f3 9508      ret
                 
                 lcd_command:	;same as LCD_putchar, but with RS low!
0000f4 931f      	push	argument
0000f5 b304      	in	temp, DDRC
0000f6 6f00      	sbr	temp, 0b11110000
0000f7 bb04      	out	DDRC, temp
0000f8 b305      	in	temp, PortC
0000f9 7001      	cbr	temp, 0b11111110
0000fa 7f10      	cbr	argument, 0b00001111
0000fb 2b01      	or	temp, argument
                 
0000fc bb05      	out	PortC, temp
0000fd 9aab      	sbi	PortC, LCD_E
0000fe 0000      	nop
0000ff 0000      	nop
000100 0000      	nop
000101 98ab      	cbi	PortC, LCD_E
000102 911f      	pop	argument
000103 700f      	cbr	temp, 0b11110000
000104 9512      	swap	argument
000105 7f10      	cbr	argument, 0b00001111
000106 2b01      	or	temp, argument
000107 bb05      	out	PortC, temp
000108 9aab      	sbi	PortC, LCD_E
000109 0000      	nop
00010a 0000      	nop
00010b 0000      	nop
00010c 98ab      	cbi	PortC, LCD_E
00010d b304      	in	temp, DDRC
00010e 700f      	cbr	temp, 0b11110000
00010f bb04      	out	DDRC, temp
000110 9508      ret
                 
                 LCD_getchar:
000111 b304      	in	temp, DDRC		;make sure the data lines are inputs
000112 700f      	andi	temp, 0b00001111	;so clear their DDR bits
000113 bb04      	out	DDRC, temp
000114 9aa9      	sbi	PortC, LCD_RS		;we want to access the char data register, so RS high
000115 9aaa      	sbi	PortC, LCD_RW		;we also want to read from the LCD -> RW high
000116 9aab      	sbi	PortC, LCD_E		;while E is high
000117 0000      	nop
000118 b303      	in	temp, PinC		;we need to fetch the HIGH nibble
000119 7f00      	andi	temp, 0b11110000	;mask off the control line data
00011a 2f20      	mov	return, temp		;and copy the HIGH nibble to return
00011b 98ab      	cbi	PortC, LCD_E		;now take E low again
00011c 0000      	nop				;wait a bit before strobing E again
00011d 0000      	nop	
00011e 9aab      	sbi	PortC, LCD_E		;same as above, now we're reading the low nibble
00011f 0000      	nop
000120 b303      	in	temp, PinC		;get the data
000121 7f00      	andi	temp, 0b11110000	;and again mask off the control line bits
000122 9502      	swap	temp			;temp HIGH nibble contains data LOW nibble! so swap
000123 2b20      	or	return, temp		;and combine with previously read high nibble
000124 98ab      	cbi	PortC, LCD_E		;take all control lines low again
000125 98a9      	cbi	PortC, LCD_RS
000126 98aa      	cbi	PortC, LCD_RW
000127 9508      ret					;the character read from the LCD is now in return
                 
                 LCD_getaddr:	;works just like LCD_getchar, but with RS low, return.7 is the busy flag
000128 b304      	in	temp, DDRC
000129 700f      	andi	temp, 0b00001111
00012a bb04      	out	DDRC, temp
00012b 98a9      	cbi	PortC, LCD_RS
00012c 9aaa      	sbi	PortC, LCD_RW
00012d 9aab      	sbi	PortC, LCD_E
00012e 0000      	nop
00012f b303      	in	temp, PinC
000130 7f00      	andi	temp, 0b11110000
000131 2f20      	mov	return, temp
000132 98ab      	cbi	PortC, LCD_E
000133 0000      	nop
000134 0000      	nop
000135 9aab      	sbi	PortC, LCD_E
000136 0000      	nop
000137 b303      	in	temp, PinC
000138 7f00      	andi	temp, 0b11110000
000139 9502      	swap	temp
00013a 2b20      	or	return, temp
00013b 98ab      	cbi	PortC, LCD_E
00013c 98aa      	cbi	PortC, LCD_RW
00013d 9508      ret
                 
                 LCD_wait:				;read address and busy flag until busy flag cleared
00013e dfe9      	rcall	LCD_getaddr
00013f 7820      	andi	return, 0x80
000140 f7e9      	brne	LCD_wait
000141 9508      	ret
                 
                 
                 LCD_delay:
000142 2422      	clr	r2
                 	LCD_delay_outer:
000143 2433      	clr	r3
                 		LCD_delay_inner:
000144 943a      		dec	r3
000145 f7f1      		brne	LCD_delay_inner
000146 942a      	dec	r2
000147 f7d9      	brne	LCD_delay_outer
000148 9508      ret
                 
                 LCD_init:
000149 e00e      	ldi	temp, 0b00001110	;control lines are output, rest is input
00014a bb04      	out	DDRC, temp
                 	
00014b dff6      	rcall	LCD_delay		;first, we'll tell the LCD that we want to use it
00014c e210      	ldi	argument, 0x20		;in 4-bit mode.
00014d df75      	rcall	LCD_command8		;LCD is still in 8-BIT MODE while writing this command!!!
                 
00014e dfef      	rcall	LCD_wait
00014f e218      	ldi	argument, 0x28		;NOW: 2 lines, 5*7 font, 4-BIT MODE!
000150 dfa3      	rcall	LCD_command		;
                 	
000151 dfec      	rcall	LCD_wait
000152 e01f      	ldi	argument, 0x0F		;now proceed as usual: Display on, cursor on, blinking
000153 dfa0      	rcall	LCD_command
                 	
000154 dfe9      	rcall	LCD_wait
000155 e011      	ldi	argument, 0x01		;clear display, cursor -> home
000156 df9d      	rcall	LCD_command
                 	
000157 dfe6      	rcall	LCD_wait
000158 e016      	ldi	argument, 0x06		;auto-inc cursor
000159 df9a      	rcall	LCD_command
00015a 9508      ret
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
r0 :   2 r1 :   1 r2 :   2 r3 :   4 r4 :   2 r5 :   2 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  80 r17:  29 r18:   7 r19:  12 r20:  16 r21:  18 r22:   5 r23:   5 
r24:   2 r25:   8 r26:   0 r27:   0 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 17 out of 35 (48.6%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   7 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   2 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   7 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   8 cbi   :  16 cbr   :  14 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   3 
cpi   :   6 cpse  :   0 dec   :  11 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  24 inc   :   6 jmp   :   2 
ld    :   0 ldd   :   0 ldi   :  24 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  13 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :  23 or    :   7 ori   :   0 out   :  21 pop   :   2 
push  :   2 rcall :  17 ret   :  11 reti  :   2 rjmp  :  10 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   4 sbi   :  21 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   6 swap  :   4 tst   :   0 wdr   :   0 
Instructions used: 38 out of 113 (33.6%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b6    642      0    642   16384   3.9%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
